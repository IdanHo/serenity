name: UBSAN build tests

on: [push, pull_request]

env:
  # Don't mix these up!
  # runner.workspace = /home/runner/work/serenity
  # github.workspace = /home/runner/work/serenity/serenity
  SERENITY_SOURCE_DIR: ${{ github.workspace }}

jobs:
  build_and_test_serenity:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      # === OS SETUP ===
      - name: "Install Ubuntu dependencies"
        run: |
          sudo add-apt-repository ppa:canonical-server/server-backports
          sudo apt-get update
          sudo apt-get install -y libmpfr-dev libmpc-dev ninja-build e2fsprogs qemu-utils qemu-system-i386
      - name: Use GCC 10 instead
        run: sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10
      - name: Check versions
        run: set +e; g++ --version; g++-10 --version; clang-format --version; clang-format-11 --version; prettier --version; python --version; python3 --version; ninja --version; flake8 --version; ccache --version; qemu-system-i386 --version

      # === PREPARE FOR BUILDING ===
      - name: Prepare useful stamps
        id: stamps
        shell: cmake -P {0}
        run: |
          string(TIMESTAMP current_date "%Y_%m_%d_%H_%M_%S" UTC)
          # Output everything twice to make it visible both in the logs
          message("  set-output name=libc_headers::${{ hashFiles('Userland/Libraries/LibC/**/*.h', 'Userland/Libraries/LibPthread/**/*.h', 'Toolchain/Patches/*.patch', 'Toolchain/BuildIt.sh') }}")
          message("::set-output name=libc_headers::${{ hashFiles('Userland/Libraries/LibC/**/*.h', 'Userland/Libraries/LibPthread/**/*.h', 'Toolchain/Patches/*.patch', 'Toolchain/BuildIt.sh') }}")
      - name: Toolchain cache
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/Toolchain/Cache/
          # This assumes that *ALL* LibC and LibPthread headers have an impact on the Toolchain.
          # This is wrong, and causes more Toolchain rebuilds than necessary.
          # However, we want to avoid false cache hits at all costs.
          key: ${{ runner.os }}-toolchain-i686-${{ steps.stamps.outputs.libc_headers }}
      - name: Restore or regenerate Toolchain
        run: TRY_USE_LOCAL_TOOLCHAIN=y ${{ github.workspace }}/Toolchain/BuildIt.sh
      - name: Create build environment
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p Build
          cd Build
          cmake .. -GNinja -DENABLE_UNDEFINED_SANITIZER=ON -DENABLE_PCI_IDS_DOWNLOAD=OFF -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10

      # === ACTUALLY BUILD ===
      - name: Build Serenity and Tests
        working-directory: ${{ github.workspace }}/Build
        run: cmake --build .

      - name: Create Serenity Rootfs
        working-directory: ${{ github.workspace }}/Build
        run: ninja install && ninja image

      - name: Run On-Target Tests
        working-directory: ${{ github.workspace }}/Build
        env:
          SERENITY_KERNEL_CMDLINE: "boot_mode=self-test"
          SERENITY_RUN: "ci"
        run: |
          echo "::group::ninja run # Qemu output"
          ninja run
          echo "::endgroup::"
          echo "::group::Verify Output File"
          mkdir fsmount
          sudo mount -t ext2 -o loop,rw _disk_image fsmount
          echo "Results: "
          sudo cat fsmount/home/anon/test-results.log
          if ! sudo grep -q "Failed: 0" fsmount/home/anon/test-results.log
          then
            echo "::error :^( Tests failed, failing job"
            exit 1
          fi
          echo "::endgroup::"
        timeout-minutes: 30

      - name: Print Target Logs
        # Extremely useful if Serenity hangs trying to run one of the tests
        working-directory: ${{ github.workspace }}/Build
        run: '[ ! -e debug.log ] || cat debug.log'

  build_and_test_lagom:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v2

      # === OS SETUP ===
      #
      - name: Install Ubuntu dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build binaryen
      - name: Check versions
        run: set +e; ninja --version; wasm-as --version

      # === PREPARE FOR BUILDING ===
      - name: Create build environment
        working-directory: ${{ github.workspace }}/Meta/Lagom
        run: |
          mkdir -p Build
          cd Build
          cmake -GNinja -DBUILD_LAGOM=ON -DINCLUDE_WASM_SPEC_TESTS=ON -DWASM_SPEC_TEST_SKIP_FORMATTING=ON -DENABLE_UNDEFINED_SANITIZER=ON -DENABLE_ADDRESS_SANITIZER=ON -DENABLE_PCI_IDS_DOWNLOAD=OFF -DCMAKE_C_COMPILER=gcc-10 -DCMAKE_CXX_COMPILER=g++-10 ..

      # === ACTUALLY BUILD AND TEST ===
      - name: Build Lagom
        working-directory: ${{ github.workspace }}/Meta/Lagom/Build
        run: cmake --build .

      - name: Run CMake tests
        working-directory: ${{ github.workspace }}/Meta/Lagom/Build
        run: ninja test
        timeout-minutes: 4
        env:
          CTEST_OUTPUT_ON_FAILURE: 1
          # FIXME: enable detect_stack_use_after_return=1 #7420
          ASAN_OPTIONS: "strict_string_checks=1:check_initialization_order=1:strict_init_order=1"
          UBSAN_OPTIONS: "print_stacktrace=1:print_summary=1:halt_on_error=1"
