/*
 * Copyright (c) 2021, Idan Horowitz <idan.horowitz@serenityos.org>
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

#include <LibTest/TestCase.h>

#include <AK/Array.h>
#include <AK/Random.h>
#include <LibCompress/Brotli.h>

TEST_CASE(deflate_decompress_block)
{
    const Array<u8, 26> compressed {
        0xa1, 0xe0, 0x00, 0xc0, 0x2f, 0x99, 0xa2, 0x13, 0xd6,
        0x82, 0x14, 0xd2, 0x88, 0x24, 0x3a, 0x06, 0x74, 0xee,
        0x51, 0x88, 0x4f, 0xe9, 0x12, 0x80, 0x8e, 0x03
    };

    const u8 uncompressed[] = "This is a simple text file :)";

    const auto decompressed = Compress::BrotliDecompressor::decompress_all(compressed);
    EXPECT(decompressed.value().bytes() == ReadonlyBytes({ uncompressed, sizeof(uncompressed) - 1 }));
}

TEST_CASE(deflate_decompress_multiple_blocks)
{
    const Array<u8, 107> compressed {
        0xa1, 0x18, 0x05, 0x00, 0x6d, 0x9c, 0xae, 0xb8, 0x93, 0x72, 0x56, 0x6c, 0xe5, 0x54,
        0x52, 0x8e, 0xba, 0x2d, 0xd5, 0x35, 0x93, 0x62, 0x6a, 0x86, 0x7c, 0x61, 0xc8, 0x41,
        0x1e, 0xfe, 0x95, 0xeb, 0xc9, 0x42, 0xee, 0x3f, 0xb3, 0x7d, 0x84, 0x62, 0xd3, 0x82,
        0x5e, 0x15, 0x76, 0x43, 0x9a, 0x76, 0x7a, 0x93, 0x94, 0xe4, 0x9c, 0x98, 0x0c, 0x57,
        0x1f, 0xf0, 0x82, 0x81, 0x96, 0x40, 0x15, 0xd2, 0xa3, 0x3d, 0x5e, 0x0c, 0xbb, 0xaa,
        0x16, 0xe9, 0x4c, 0x33, 0x4e, 0x61, 0x6b, 0xca, 0xc2, 0x87, 0x45, 0xbd, 0x90, 0x0d,
        0x23, 0x26, 0x03, 0x03, 0xf7, 0xa6, 0xab, 0x71, 0x1b, 0x25, 0xda, 0xf7, 0x78, 0xdd,
        0x0a, 0x11, 0x4f, 0xed, 0x82, 0xe3, 0x4e, 0x6a, 0x01
    };

    const u8 uncompressed[] = "SerenityOS is a love letter to '90s user interfaces with a custom Unix-like core. It flatters with sincerity by stealing beautiful ideas from various other systems.";

    const auto decompressed = Compress::BrotliDecompressor::decompress_all(compressed);
    EXPECT(decompressed.value().bytes() == (ReadonlyBytes { uncompressed, sizeof(uncompressed) - 1 }));
}

TEST_CASE(deflate_decompress_zeroes)
{
    const Array<u8, 13> compressed {
        0xd1, 0xf8, 0x7f, 0xc0, 0x3f, 0x01, 0x10,
        0x8f, 0x05, 0x02, 0xb9, 0x07, 0x00
    };

    const Array<u8, 4096> uncompressed { 0 };

    const auto decompressed = Compress::BrotliDecompressor::decompress_all(compressed);
    EXPECT(uncompressed == decompressed.value().bytes());
}
