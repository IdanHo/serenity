From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Idan Horowitz <idan.horowitz@gmail.com>
Date: Sun, 10 Jul 2022 10:28:38 +0300
Subject: [PATCH] server+ntdll: Use serenity's fd sending API

---
 dlls/ntdll/unix/server.c | 43 +++++++++++++++++++++++++
 server/request.c         | 69 ++++++++++++++++++++++++++++++++++++++++
 2 files changed, 112 insertions(+)

diff --git a/dlls/ntdll/unix/server.c b/dlls/ntdll/unix/server.c
index 1dcd079..cb261f9 100644
--- a/dlls/ntdll/unix/server.c
+++ b/dlls/ntdll/unix/server.c
@@ -758,6 +758,25 @@ unsigned int server_queue_process_apc( HANDLE process, const apc_call_t *call, a
  */
 void wine_server_send_fd( int fd )
 {
+#ifdef __serenity__
+    struct send_fd data;
+    int ret;
+
+    data.tid = GetCurrentThreadId();
+    data.fd  = fd;
+    for (;;)
+    {
+        if ((ret = send( fd_socket, &data, sizeof(data), 0 )) == sizeof(data)) break;
+        if (ret >= 0) server_protocol_error( "partial write %d\n", ret );
+        if (errno == EINTR) continue;
+        if (errno == EPIPE) abort_thread(0);
+        server_protocol_perror( "send" );
+    }
+
+    ret = sendfd( fd_socket, fd );
+    if (ret == 0) return;
+    server_protocol_perror( "sendfd" );
+#else  /* __serenity__ */
     struct send_fd data;
     struct msghdr msghdr;
     struct iovec vec;
@@ -799,6 +818,7 @@ void wine_server_send_fd( int fd )
         if (errno == EPIPE) abort_thread(0);
         server_protocol_perror( "sendmsg" );
     }
+#endif  /* __serenity__ */
 }
 
 
@@ -809,6 +829,28 @@ void wine_server_send_fd( int fd )
  */
 static int receive_fd( obj_handle_t *handle )
 {
+#ifdef __serenity__
+    int fd = -1;
+    for (;;)
+    {
+        fd = recvfd( fd_socket, O_CLOEXEC );
+        if (fd >= 0) break;
+        if (errno == EAGAIN) continue;
+        server_protocol_perror("recvfd");
+    }
+    int ret = recv( fd_socket, handle, sizeof(*handle), 0 );
+    if (ret == sizeof(*handle)) {
+        return fd;
+    }
+    if (ret >= 0) {
+        server_protocol_error( "partial recv %d\n", ret );
+    }
+    if (errno == EPIPE) {
+        /* the server closed the connection; time to die... */
+        abort_thread(0);
+    }
+    server_protocol_perror("recv");
+#else  /* __serenity__ */
     struct iovec vec;
     struct msghdr msghdr;
     int ret, fd = -1;
@@ -859,6 +901,7 @@ static int receive_fd( obj_handle_t *handle )
     }
     /* the server closed the connection; time to die... */
     abort_thread(0);
+#endif  /* __serenity__ */
 }
 
 
diff --git a/server/request.c b/server/request.c
index b7d2713..15069e2 100644
--- a/server/request.c
+++ b/server/request.c
@@ -380,6 +380,45 @@ error:
 /* receive a file descriptor on the process socket */
 int receive_fd( struct process *process )
 {
+#ifdef __serenity__
+    int fd = recvfd( get_unix_fd( process->msg_fd ), 0 );
+    if (fd < 0) {
+        if (errno == EAGAIN) return -1;
+        fprintf( stderr, "Protocol error: process %04x: ", process->id );
+        perror( "recvfd" );
+        kill_process( process, 1 );
+    }
+    struct send_fd data;
+    int ret = recv( get_unix_fd( process->msg_fd ), &data, sizeof(data), 0 );
+    if (ret == sizeof(data)) {
+        struct thread *thread;
+
+        if (data.tid) thread = get_thread_from_id( data.tid );
+        else thread = (struct thread *)grab_object( get_process_first_thread( process ));
+
+        if (!thread || thread->process != process || thread->state == TERMINATED)
+        {
+            close( fd );
+        }
+        else
+        {
+            thread_add_inflight_fd( thread, data.fd, fd );
+        }
+        if (thread) release_object( thread );
+        return 0;
+    }
+    if (ret >= 0) {
+        fprintf( stderr, "Protocol error: process %04x: partial recv %d for fd\n",
+                 process->id, ret );
+        close( fd );
+        kill_process( process, 1 );
+    }
+    if (ret < 0 && errno != EAGAIN) {
+        fprintf( stderr, "Protocol error: process %04x: ", process->id );
+        perror( "recv" );
+        kill_process( process, 1 );
+    }
+#else  /* __serenity__ */
     struct iovec vec;
     struct send_fd data;
     struct msghdr msghdr;
@@ -461,12 +500,41 @@ int receive_fd( struct process *process )
             kill_process( process, 1 );
         }
     }
+#endif  /* __serenity__ */
     return -1;
 }
 
 /* send an fd to a client */
 int send_client_fd( struct process *process, int fd, obj_handle_t handle )
 {
+#ifdef __serenity__
+    int ret = send( get_unix_fd( process->msg_fd ), &handle, sizeof(handle), 0 );
+    if (ret != sizeof(handle)) {
+        if (ret >= 0)
+        {
+            fprintf( stderr, "Protocol error: process %04x: partial send %d\n", process->id, ret );
+            kill_process( process, 1 );
+        }
+        else if (errno == EPIPE)
+        {
+            kill_process( process, 0 );
+        }
+        else
+        {
+            fprintf( stderr, "Protocol error: process %04x: ", process->id );
+            perror( "send" );
+            kill_process( process, 1 );
+        }
+    }
+
+    ret = sendfd( get_unix_fd( process->msg_fd ), fd );
+
+    if (ret == 0) return 0;
+
+    fprintf( stderr, "Protocol error: process %04x: ", process->id );
+    perror( "sendfd" );
+    kill_process( process, 1 );
+#else  /* __serenity__ */
     struct iovec vec;
     struct msghdr msghdr;
     int ret;
@@ -518,6 +586,7 @@ int send_client_fd( struct process *process, int fd, obj_handle_t handle )
         perror( "sendmsg" );
         kill_process( process, 1 );
     }
+#endif  /* __serenity__ */
     return -1;
 }
 
